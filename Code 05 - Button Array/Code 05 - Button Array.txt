-- Code 05 - Button Array-- Can be copied into Codea---- Display an array of characters-- If a button is pressed the name (label)-- of the button is returned and displayed---- Some code from David Such-- Bruce Elliott-- April 2013--# ButtonButton = class()function Button:init(displayName, x, y)    -- you can accept and set parameters here    self.displayName = displayName        self.pos = vec2(x,y)    self.size = vec2(0,0)    self.action = nil    self.color = color(113,66,190,255)  --  print(self.displayName.." "..self.pos.x.." "..self.pos.y)endfunction Button:draw()    -- Codea does not automatically call this method    pushStyle()    fill(self.color)    font("ArialRoundedMTBold")    fontSize(22)        local w,h = textSize(self.displayName)    w = w + 20    h = h + 20        rect(self.pos.x - w/2,         self.pos.y - h/2,         w, h)    self.size = vec2(w,h)        textMode(CENTER)    fill(54,65,96,255)    text(self.displayName,self.pos.x,self.pos.y)        popStyle()endfunction Button:hit(p)    local w,h = textSize(self.displayName)    w = w + 20    h = h + 40    local l = self.pos.x - w/2    local r = self.pos.x + w/2    local t = self.pos.y + h/2    local b = self.pos.y - h/2        if p.x > l and p.x < r       and p.y > b and p.y < t then      -- print (self.displayName.." "..self.pos.x)        return true        end     --   print("false")            return false    endfunction Button:touched(touch)    -- Codea does not automatically call this method    if touch.state == ENDED and       self:hit(vec2(touch.x,touch.y)) then        if self.action then            newName = self.displayName            self.action()        end    end    end--function Button:name()    --return self.displayName--endfunction Button:action()   -- print(newName)    buttonPressed(newName)end--# Main-- Button Array-- Use this function to perform your initial setupfunction setup()-- Create a table of button objects-- Name, x, and y position    print("Button  Test Project")        kTab={}    kTab[1] = Button("1", 100, HEIGHT-HEIGHT/4)    kTab[2] = Button("2", 200,HEIGHT-HEIGHT/4)    kTab[3] = Button("3",300,HEIGHT-HEIGHT/4)    kTab[4] = Button("4",100,HEIGHT-HEIGHT/4-80)    kTab[5] = Button("5",200,HEIGHT-HEIGHT/4-80)    kTab[6] = Button("6",300,HEIGHT-HEIGHT/4-80)    kTab[7] = Button("7",100,HEIGHT-HEIGHT/4-160)    kTab[8] = Button("8",200,HEIGHT-HEIGHT/4-160)    kTab[9] = Button("9",300,HEIGHT-HEIGHT/4-160)    kTab[10] = Button("0",100,HEIGHT-HEIGHT/4-240)    kTab[11] = Button("-",200,HEIGHT-HEIGHT/4-240)    kTab[12] = Button("+",300,HEIGHT-HEIGHT/4-240)    kTab[13] = Button("*",100,HEIGHT-HEIGHT/4-320)        kTab[14] = Button("/",200,HEIGHT-HEIGHT/4-320)        kTab[15] = Button("=",300,HEIGHT-HEIGHT/4-320)    kTab[16] = Button("C",100,HEIGHT-HEIGHT/4-400) end-- This function gets called once every framefunction draw()    -- This sets a dark background color     background(40, 40, 50)        -- Do your drawing here   drawButton()endfunction drawButton()-- For each button in the array call draw-- v is a button from the table-- v:draw() call draw for this button    for k, v in pairs(kTab) do        v:draw()    endendfunction touched(touch)-- For each button check for a touch    for k, v in pairs(kTab) do        v:touched(touch)    endendfunction buttonPressed(keyName)-- Display the name of a button that has been pressed    print("Button: "..keyName)end