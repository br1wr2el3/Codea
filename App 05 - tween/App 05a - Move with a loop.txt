--# Main-- App 05a - Move with a loop-- Bruce Elliott-- April 2013-- Appetizer to use a loop to move an object from-- bottom left to upper left corner of screen-- Note: In MyObject:update() deltax and deltay are-- computed assuming fourty steps from beginning to end.-- These values differ depending on displayMode().--displayMode(FULLSCREEN)supportedOrientations(LANDSCAPE_RIGHT)function setup()    -- Initialize the object table    -- starting x, y, and object rotation     obj =  MyObject:init(10, 10, 135)endfunction draw()    -- background clears screen on each draw.     -- comment out to see difference    background(255)    -- Draw object    MyObject:draw(obj)    -- Update x and y of object    -- parameter determines how often values are changed    -- larger number slows progress but adds hesitation    -- keep value 1 or larger    MyObject:update(2)endfunction endProgram()    print("Program ended")    end--# MyObjectMyObject = class()function MyObject:init(x, y, rot)    -- Create object with default values    SetObject:init()        -- Create shortcut for this object    myObj = objTab[1]        -- Use input parameters    -- Set x    myObj[4] = x    -- Set y    myObj[5] = y    -- Set rotation    myObj[6] = rot        -- Inititialize timer used to control    -- movement    i = 1    -- return object to main    return myObj  --  MyObject:draw(myObj)endfunction MyObject:draw(this)    -- this is our object    -- Get sprite name    local spriteName = this[3]    -- Compute size from sprite name    local size = vec2(spriteSize(this[3]))    -- Create vec2 position    local pos = vec2( this[4],this[5])    -- Set rotation    local objRot = this[6]    -- Store old graphic info    pushMatrix()        -- Draw Sprite    translate(pos.x, pos.y)    rotate(objRot)    sprite(spriteName, 0,0)     -- Restore old data    popMatrix()    endfunction MyObject:update(inc)    -- Determine if object should change x and y values    -- Make sure increment inc is 1 or larger    if inc < 1 then        inc = 1    end    -- increment counter    i = i + 1    -- Determine how much to increment x and y    -- assumes fourty stepd    deltax = WIDTH / 40    deltay = HEIGHT / 40        -- Use fmod (modulus) to control changing x and y    if (math.fmod(i, inc) == 0) then        -- Increment x and y but no larger        -- than WIDTH or HEIGHT        -- min (minimum) stops increments when        -- limit reached        myObj[4] = math.min(WIDTH, myObj[4] + deltax )        myObj[5] = math.min(HEIGHT, myObj[5] + deltay)    end        if myObj[4] >= WIDTH then        endProgram()    endend--# SetObjectSetObject = class()function SetObject:init()    -- Create object table        -- Status (not used yet)    -- "a" - active    -- "n" - not active    -- "d" - destroyed    objTab={} --   objTab[1] = {"a", 1, "Tyrian Remastered:Boss D", 500,500,52} --   objTab[2] = {"a", 2, "Tyrian Remastered:Boss C", 300,403,102}--    objTab[3] = {"a", 3, "Tyrian Remastered:Boss B", 500,600,132}    objTab[1] = {"a", 1, "Tyrian Remastered:Plane Boss",10,10,180-45}--    objTab[5] = {"a", 5, "Tyrian Remastered:Space Bug Left()""", 200, 500,90}   end