--# Main-- http and maps-- Bruce Elliott-- May 2013-- Ideas from Image I/O Example-- This program demonstrates several things-- Use of Http.request to get a map using Google map API-- Use of paramters to input text and contol functions-- Use of string functions to process text-- Use of saveImage to save maps to Documents and Dropboxfunction setup()    -- Use a function to draw address parameter    parameterSet01()        img = nil    logo = nilendfunction getMap()    -- Uses address from user to get map    -- using Google maps API (Application Programming Interface)    logo = nil -- it's empty for now    print("get map")        --Insert address into API call    http1 = "http://maps.googleapis.com/maps/api/staticmap?center="    http2 = "&zoom=14&size=400x400&sensor=false"    request = http1.. addressNew .. http2    -- Use http.request to submit Internet request        http.request(request, didGetLogo)    --    http.request( "http://maps.googleapis.com/maps/api/staticmap?center=Berkeley,CA&zoom=14&size=400x400&sensor=false", didGetLogo )endfunction makeImage()    -- This function makes map sprite    -- Renders it into an image, and returns the image    -- We exapanded the size of img to screen size    local img = image(WIDTH, HEIGHT)    ------------------------------------    -- Use the image as a render target    setContext(img)    background(0,0,0,0) -- transparent background    fill(255,0,0)    -- We draw the sprite to img instead of the screen    sprite( logo, WIDTH/2, HEIGHT/2, WIDTH )--    ellipse(200,200,200)    -- Set render target back to screen    setContext()    ------------------------------------    return imgendfunction didGetLogo( theLogo, status, headers )    -- http.request calls this for results    print( "Response Status: " .. status )        -- Store map in our global variable    logo = theLogo        -- Check if the status is OK (200)    if status == 200 then        print( "Downloaded logo OK" )        print( " Image dimensions: " ..                     logo.width .. "x" .. logo.height )        -- Call makeImage once image was downloaded        newMap = makeImage()    else        print( "Error downloading logo" )    endend-- This function gets called once every framefunction draw()    -- This sets a dark background color     background(40, 40, 50)    -- Draw the map we downloaded (when it's ready!)    if logo ~= nil then        sprite(newMap, WIDTH/2, HEIGHT/2, WIDTH )    endendfunction parameterSet01()    parameter.clear()    parameter.text("Address", "Fort Worth, TX")    parameter.action("Address Complete", addressDone)    endfunction parameterSet02()    -- Show adding new parameters to list    parameter.action("Get Map", getMap)        parameter.text("FileName", fileName)    parameter.action("Filename Complete", filenameDone)endfunction addressDone(value)    -- User says address is ready for processing    -- Google API requires "+" instead of spaces    -- store in addressVal    addressVal = Address    addressNew = ""    newStr = {}       -- Get length of address    sLen = string.len(addressVal)    -- Convert address to all lowercase    addressVal = string.lower(addressVal)        -- This loop will process address word by word    -- words are delimited by space characters        -- We remove a word from the front of addressVal    -- and adds it plus a "+" to addressNew    while sLen > 0 do        -- Call function to find a word and remove it from the address        newStr = extractSpc(addressVal)        -- Append word to addressNew        addressNew = addressNew..newStr[1]                -- determine if we have the last word        -- newStr[2] is nil if no more spaces (words)        if newStr[2] ~= nil then            -- Set addressVal remaining address            addressVal = newStr[2]            -- Determine lenght of remaining address            sLen = string.len(addressVal)        else            -- Set sLen to 0 to terminate loop            sLen = 0            print(addressNew)        end    end    -- Display remaining parameters    parameterSet02() --   return addressNewendfunction extractSpc(oldAdd)    -- Determine length of string    sLen = string.len(oldAdd)    -- Find first space if any    spc = string.find(oldAdd," ")     -- spc will be nil if no spaces found    if spc ~= nil then         -- Subtract 1 for space        spc = spc -1        -- Extract characters        substr = string.sub(oldAdd, 1, spc)        -- Add a plus sign        substr = substr .. "+"        -- Remove first word from string (address)        newAdd = string.sub(oldAdd, spc+2, sLen)     else        -- No space found substr = remaining address        substr = oldAdd        -- Set old address to nil        -- This works as flag that processing is done        newAdd = nil    end        -- Put both strings into table for return    retVal = {substr, newAdd}        return retValendfunction filenameDone()    -- Use input filename to create strings    -- to save to Documents abd Dropbox    -- There is no error checking of filename    docName = "Documents:"..FileName    boxName = "Dropbox:"..FileName        -- Save to Dropbox or Documents or both    -- Add comments if you do not want to save    -- to a destination    saveImage(boxName, newMap)    saveImage(docName, newMap)       end 