--# Main-- Appetizer 02 Sprites-- Bruce Elliott-- April 2013-- Demonstrate the base actions needed to control -- and move a sprite-- Sprites are available in Sprite Packs-- You can also create your own from pictures-- The Spritely example project will let you create-- an icon then there are steps for moving from-- Spritely to your Sprite Pack.  Read the comment for Spriteloader-- in Spritely.-- Use this function to perform your initial setupfunction setup()    -- Set initial values for x, y, and rotation        -- This step is not required, the parameters will     -- set new values. This step just highlights     -- these variables        shipX = 0    shipY = 0    Rotation = 0    -- Set three parameters so we can monitor thespe values    -- parameter field definitions:    -- Name, Min Value, Max Value, Initial Value    parameter.number("shipX", 0, HEIGHT, HEIGHT/2)    parameter.number("shipY", 0, WIDTH, WIDTH/2)    parameter.number("Rotation", 0,360, 180)        -- Sprite name from Sprite Pack    shipName = "Tyrian Remastered:Boss D"        -- Set up shipSize vec2 variable    shipSize = vec2(spriteSize(shipName))           -- Set up shortcuts    shipW = shipSize.x    shipL = shipSize.y   end    -- This function gets called once every framefunction draw()    -- Store the current environment    pushMatrix()        -- This sets a background color    background(176, 176, 199, 255)       -- Set x and y for the sprite    translate(shipX, shipY)    -- Set the rotation for the sprite    rotate(Rotation)    -- Draw the sprite    sprite(shipName, 0,0)        -- Restore the previous environment    popMatrix()   end function touched(touch)    -- Was sprite touched? BEGAN or MOVING is true?    if touch.state == BEGAN or touch.state == MOVING then        -- If not inside x size no more processing needed        -- shipX is the middle of the sprite x value        -- touch.x is the x value where the touch happened        -- Is touch.x inside sprite x size? If yes continue        if (touch.x > (shipX - shipL/2) and touch.x < (shipX + shipL/2)) then            -- Is touch.y inside sprite y size? If yes continue            -- shipY is the middle of the sprite y value            -- touch.y is the y touch value            if (touch.y > (shipY - shipW/2) and touch.y <  (shipY + shipW/2)) then                -- Touch was on sprite                -- Set updated sprite position                shipX = touch.x                shipY = touch.y                                -- Rotate the icon to one of four values the point sprite in                 -- the direction of movement                -- Compute Rotation from deltaX and deltaY values                if touch.deltaX < 0 and touch.deltaY < 0 then                    Rotation = 315                elseif touch.deltaX < 0 and touch.deltaY > 0 then                    Rotation = 225                elseif touch.deltaX > 0 and touch.deltaY < 0 then                    Rotation = 45                elseif touch.deltaX > 0 and touch.deltaY > 0 then                    Rotation = 135                end            end        end    endend  